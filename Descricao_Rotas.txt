Descrição das Rotas da API


Descrição das rotas da API do site desenvolvido para o TCC, divididas pelo tipo de usuário necessário para acessá-las.


- Mensagens de Erro Padronizadas -


-Falta de token ou token inválido (em rotas que exigem login) (status 401):
{
        "mensagem": "Token inválido, faça login para acessar essa rota.",
        "erro": "Unauthenticated."
}


-Falta de habilidade específica de token para rotas que exigem ser um tipo de usuário específico (status 401):
{
        "mensagem": "Você não tem permissão para acessar essa rota."
}


-Problema de conexão com o banco para acessar tabelas do próprio Laravel (não consegue verificar o token) (status 500):
{
        "mensagem": "Erro ao conectar com o banco de dados."
}


- Rotas de Usuários no Geral -


-Rota para listar as categorias de usuário (necessária para o cadastro):
Caminho da rota: http://localhost:8000/api/categoriasusuario
Método HTTP: GET.
Necessita de token: Não.


Mensagem de sucesso (status 200):
[
        {
                "id": 2,
                "nome": "Cliente"
        },
        {
                "id": 3,
                "nome": "Vendedor"
        },
        {
                "id": 4,
                "nome": "Entregador"
        }
]


Mensagem de erro (status 400):
{
"mensagem": "Falha ao carregar as categorias de usuário.",
        "erro": "(Mostra qual exceção foi lançada)"
}




-Rota para listar os tipos de veículo (necessária para o cadastro de entregador):
Caminho da rota: http://localhost:8000/api/tiposveiculo
Método HTTP: GET.
Necessita de token: Não.


Mensagem de sucesso (status 200):
[
        {
                "id": 1,
                "nome": "Moto"
        },
        {
                "id": 2,
                "nome": "Carro"
        },
        {
                "id": 3,
                "nome": "Caminhão"
        }
]


Mensagem de erro (status 400):
{
"mensagem": "Falha ao carregar os tipos de veículo.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota para listar os métodos de pagamento (necessária para realizar o pedido):
Caminho da rota: http://localhost:8000/api/metodospagamento
Método HTTP: GET.
Necessita de token: Não (Por enquanto, devo mudar depois).


Mensagem de sucesso (status 200):
[
        {
                "id": 1,
                "nome": "Dinheiro"
        },
        {
                "id": 2,
                "nome": "Pix (na entrega)"
        },
        {
                "id": 3,
                "nome": "Visa Crédito"
        }, (assim por diante)
]


Mensagem de erro (status 400):
{
"mensagem": "Falha ao carregar os métodos de pagamento.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota para cadastrar usuário: 
Caminho da rota: http://localhost:8000/api/usuarios/cadastro
Método HTTP: POST.
Necessita de token: Não.


Requests esperados:


-Para cliente (id_categoria 2):
{
  "usuario": {
    "nome": "Thiago Gostosão",
    "id_categoria": 2,
    "email": "thiago.gostosao@example.com",
    "senha": "senha123",
    "senha_confirmation": "senha123",
    "cpf": "XXX.XXX.XXX-XX",
    "telefone": "(XX) XXXXX-XXXX"
  },
  "foto_login": "arquivo da imagem"
}


-Para vendedor (id_categoria 3):
{
  "usuario": {
    "nome": "Thiago Gostosão",
    "id_categoria": 3,
    "email": "thiago.gostosao2@example.com",
    "senha": "senha456",
    "senha_confirmation": "senha456",
    "cpf": "XXX.XXX.XXX-XX",
    "telefone": "(XX) XXXXX-XXXX",
    "whatsapp": "(XX) XXXXX-XXXX",
    "cnpj": "XX.XXX.XXX/XXXX-XX",
    "cep": "XXXXX-XXX"
  },
  "foto_login": "arquivo da imagem"
}


-Para entregador (id_categoria 4):
{
  "usuario": {
    "nome": "Thiago Gostosão",
    "id_categoria": 4,
    "email": "thiago.gostosao3@example.com",
    "senha": "senha789",
    "senha_confirmation": "senha789",
    "cpf": "XXX.XXX.XXX-XX",
    "telefone": "(XX) XXXXX-XXXX",
    "id_tipo_veiculo": 1,
    "placa": "XXX-XXXX"
  },
  "foto_login": "arquivo da imagem"
}


Mensagens de sucesso (todas com status 200):


-Para cliente:
{
        "mensagem": "Cliente cadastrado com sucesso."
}


-Para vendedor:
{
        "mensagem": "Vendedor cadastrado com sucesso, aguarde autorização de algum admin."
}


-Para entregador:
{
        "mensagem": "Entregador cadastrado com sucesso, aguarde autorização de algum admin."
}


Mensagens de erro:


-Falta da chave “usuario” no json  (status 400):
        {
        "mensagem": "Campo \"usuario\" não encontrado na requisição."
}
-Json mal formado (status 400):
{
        "mensagem": "Erro ao processar os dados do usuário.",
        "erro": "Syntax error"
}


-Problema de validação (status 422):
-Se for na chave “usuario” (exemplo):
{
        "errors": {
                "telefone": [
                        "O campo telefone deve ser 15 caracteres.",
                        "O telefone deve seguir o formato (XX) XXXXX-XXXX.",
                        "O código de área do telefone não é do Brasil."
                ],
                "placa": [
                        "O campo placa já está sendo utilizado."
                ], (assim por diante)
        }
}


        -Se for na chave “foto_login” (exemplo):
{
        "errors": {
                "foto_login": [
                        "O campo foto login deve ser uma imagem.",
                        "O campo foto login deve ser um arquivo do tipo: jpeg, png, jpg, gif."
                ]
        }
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Erro ao cadastrar usuário.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Caso não passe em nenhum if (status 400):
{
"mensagem": "Erro ao cadastrar usuário."
}


-Rota para realizar login: 
Caminho da rota: http://localhost:8000/api/usuarios/login
Método HTTP: POST.
Necessita de token: Não (obviamente).


Request esperado:
{
        "email": "xxxxxxxxxxxx@example.com",
        "senha": "senha ué"
}


Mensagens de sucesso (todas com status 200):


-Para admin (obs.: gera token com habilidade de admin):
{
        "message": true,
        "caminho": "\/adm",
        "id": 1,
"token":"1|qEk5ftEEdtEAMtFnWzXFQaSnT5OY2SxftL4VhuB1a2377fd2"
}

-Para cliente (obs.: gera token com habilidade de cliente):
{
        "message": true,
        "caminho": "\/cliente",
        "id": 1,
"token":"1|qEk5ftEEdtEAMtFnWzXFQaSnT5OY2SxftL4VhuB1a2377fd2"
}


-Para vendedor (obs.: gera token com habilidade de vendedor):
{
        "message": true,
        "caminho": "\/loja",
        "id": 1,
"token":"1|qEk5ftEEdtEAMtFnWzXFQaSnT5OY2SxftL4VhuB1a2377fd2"
}


-Para entregador (obs.: gera token com habilidade de entregador):
{
        "message": true,
        "caminho": "\/entregador",
        "id": 1,
"token":"1|qEk5ftEEdtEAMtFnWzXFQaSnT5OY2SxftL4VhuB1a2377fd2"
}


Obs.: O id gerado é do usuário no banco. 
Obs.: Deve armazenar o id e o token na variável local para uso em operações no site.


Mensagens de erro:


-Problema de validação (status 422) (exemplo): 
{
        "errors": {
                "email": [
                        "O campo email é obrigatório."
                ],
                "senha": [
                        "O campo senha é obrigatório."
                ]
        }
}


-Usuário ainda não aceito por algum admin (status 404):
{
        "mensagem": "Login não permitido. Seu usuário ainda não foi aceito no sistema!"
}


-Email não registrado no sistema (status 404):
{
        "mensagem": "Email não registrado no sistema."
}


-Senha incorreta para o email fornecido (status 404):
{
        "mensagem": "Senha incorreta."
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Falha ao logar.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota para realizar logout: 
Caminho da rota: http://localhost:8000/api/usuarios/logout/{id do usuario}
-Exemplo (logout do usuário com id 1): http://localhost:8000/api/usuarios/logout/1 


Método HTTP: DELETE.
Necessita de token: Sim (obviamente), mas sem habilidade específica.


Mensagem de sucesso (status 200):
{
        "mensagem": "Deslogado com sucesso."
}


Mensagens de erro:
-Usuário não encontrado (status 404): 
{
        "error": "Usuário não encontrado."
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Falha ao deslogar.",
        "erro": "(Mostra qual exceção foi lançada)"
}


Obs.: Ter certeza de só enviar o id do próprio usuário, pois estava com preguiça de fazer verificação de token.


-Rota de indicar que esqueceu a senha:
Caminho da rota: http://localhost:8000/api/usuarios/esqueceu-senha
Método HTTP: POST.
Necessita de token: Não.


Request Esperado: 
        {
        "email": "SEILA@gmail.com"
}


Mensagem de sucesso (status 200):
{
        "message": "Enviado e-mail com instruções para recuperar a senha!"
}


Mensagens de erro
-Problema de validação (status 422) (exemplo): 
{
        "errors": {
                "email": [
                        "O campo email é obrigatório."
                ]
        }
}


-Usuário não encontrado (status 404): 
{
        "error": "Email não registrado no sistema."
}


-Usuário ainda não aceito por algum admin (status 404):
{
        "mensagem": "Seu usuário ainda não foi aceito no sistema!"
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Falha ao recuperar a senha.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota de indicar que validar código para resetar senha:
Caminho da rota: http://localhost:8000/api/usuarios/validar-codigo
Método HTTP: POST.
Necessita de token: Não.


Request Esperado: 
        {
        "email": "SEILA@gmail.com",
        "codigo": "XXXXXX"
}


Mensagem de sucesso (status 200):
{
        "message": "Código válido!"
}


Mensagens de erro
-Problema de validação (status 422) (exemplo): 
{
        "errors": {
                "email": [
                        "O campo email deve ser um endereço de e-mail válido."
                ],
                "codigo": [
                        "O campo codigo deve ser 6 caracteres."
                ]
        }
}


-Usuário não encontrado (status 404): 
{
        "error": "Usuário não encontrado!"
}


-Código inválido ou expirado (status 400) (exemplo):
{
        "message": "Código inválido!"
}


-Caso haja alguma exceção (status 400):
{
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota de indicar que validar código para resetar senha:
Caminho da rota: http://localhost:8000/api/usuarios/resetar-senha
Método HTTP: POST.
Necessita de token: Não.


Request Esperado: 
        {
        "email": "thiagopifferlauro@gmail.com",
        "codigo": "XXXXXX",
        "senha": "ViadoGames",
        "senha_confirmation": "ViadoGames"
}


Mensagem de sucesso (status 200):
{
        "status": true,
        "message": "Senha atualizada com sucesso!"
}


Mensagens de erro
-Problema de validação (status 422) (exemplo): 
{
        "errors": {
                "email": [
                        "O campo email deve ser um endereço de e-mail válido."
                ],
                "codigo": [
                        "O campo codigo deve ser 6 caracteres."
                ],
                "senha": [
                        "O campo senha de confirmação não confere."
                ]
        }
}


-Usuário não encontrado (status 404): 
{
        "error": "Usuário não encontrado!"
}


-Código inválido ou expirado (status 400) (exemplo):
{
        "message": "Código inválido!"
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Não foi possível alterar a senha.",
        "erro": "(Mostra qual exceção foi lançada)"
}


- Rotas de Admin -


Todas as rotas exigem login de admin, logo precisam de token com a habilidade de admin.


-Rota de listar entregadores ainda não aceitos no site:
Caminho da rota: http://localhost:8000/api/admins/entregadoresAguardando
Método HTTP: GET.


Mensagem de sucesso (status 200):
[
        {
                "id": 9,
                "nome": "Thiago Gostosão",
                "email": "thiago.gostosao3@example.com",
                "cpf": "501.525.350-80",
                "foto_login": "storage\/imagens_usuarios\/imagem_default_usuario.jpg",
                "entregador": {
                        "id_usuario": 9,
                        "telefone": "(27) 99618-4048",
                        "placa": "AAA-234A",
                        "id_tipo_veiculo": 1,
                        "tipo_veiculo": {
                                "id": 1,
                                "nome": "Moto"
                        }
                }
        },
        {
                "id": 10,
                "nome": "Thiago Gostosão",
                "email": "thiago.gostosao31@example.com",
                "cpf": "536.402.600-07",
                "foto_login": "storage\/imagens_usuarios\/imagem_default_usuario.jpg",
                "entregador": {
                        "id_usuario": 10,
                        "telefone": "(27) 99618-4048",
                        "placa": "AAA-234A",
                        "id_tipo_veiculo": 1,
                        "tipo_veiculo": {
                                "id": 1,
                                "nome": "Moto"
                        }
                }
        }, (Assim por diante)
]


Mensagem de erro (status 400):
{
"mensagem": "Falha ao carregar os entregadores que aguardam aceitação.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota de listar vendedores ainda não aceitos no site:
Caminho da rota: http://localhost:8000/api/admins/vendedoresAguardando
Método HTTP: GET.


Mensagem de sucesso (status 200):
[
        {
                "id": 7,
                "nome": "Thiago Gostosão",
                "email": "thiago.gostosao2@example.com",
                "cpf": "944.735.960-44",
                "foto_login": "storage\/imagens_usuarios\/imagem_default_usuario.jpg",
                "vendedor": {
                        "id": 1,
                        "id_usuario": 7,
                        "telefone": "(27) 99618-4048",
                        "whatsapp": "(27) 99618-4048",
                        "cnpj": "61.786.863\/0001-20",
                        "endereco": {
                                "id_vendedor": 1,
                                "cep": "29700-570",
                                "logradouro": "Rua Sebastião Demétrio da Silva",
                                "bairro": "Colatina Velha",
                                "localidade": "Colatina",
                                "uf": "ES"
                        }
                }
        },
        {
                "id": 8,
                "nome": "Thiago Gostosão",
                "email": "thiago.gostosao21@example.com",
                "cpf": "633.314.930-66",
                "foto_login": "storage\/imagens_usuarios\/imagem_default_usuario.jpg",
                "vendedor": {
                        "id": 2,
                        "id_usuario": 8,
                        "telefone": "(27) 99618-4048",
                        "whatsapp": "(27) 99618-4048",
                        "cnpj": "92.238.896\/0001-60",
                        "endereco": {
                                "id_vendedor": 2,
                                "cep": "29700-570",
                                "logradouro": "Rua Sebastião Demétrio da Silva",
                                "bairro": "Colatina Velha",
                                "localidade": "Colatina",
                                "uf": "ES"
                        }
                }
        }, (Assim por diante)
]


Mensagem de erro (status 400):
{
"mensagem": "Falha ao carregar os vendedores que aguardam aceitação.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota de aceitar usuário:
Caminho da rota: http://localhost:8000/api/admins/aceitaradmin/{id}
Método HTTP: PUT.


Mensagem de sucesso (status 200):
{
        "message": "Usuário aceito com sucesso."
}


Mensagens de erro:
-Usuário não encontrado (status 404):
{
        "message": "Usuário não encontrado."
}


-Usuário que não é entregador e nem vendedor (status 403):
{
        "message": "O usuário não pode ser aceito porque não é vendedor e nem entregador."
}


-Usuário já ativo (status 403):
{
        "message": "O usuário já está ativo, não pode ser aceito de novo."
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Falha ao aceitar usuário.",
        "erro": "(Mostra qual exceção foi lançada)"
}


-Rota de recusar usuário:
Caminho da rota: http://localhost:8000/api/admins/recusaradmin/{id}
Método HTTP: PUT.


Mensagem de sucesso (status 200):
{
        "message": "Usuário recusado com sucesso."
}


Mensagens de erro:
-Usuário não encontrado (status 404):
{
        "message": "Usuário não encontrado."
}


-Usuário que não é entregador e nem vendedor (status 403):
{
        "message": "O usuário não pode ser recusado."
}


-Usuário já ativo (status 403):
{
        "message": "O usuário já está ativo, não pode ser recusado."
}


-Caso haja alguma exceção (status 400):
{
"mensagem": "Falha ao recusar usuário.",
        "erro": "(Mostra qual exceção foi lançada)"
}